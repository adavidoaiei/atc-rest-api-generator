/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

namespace Demo.Client.Generated {

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "/api/v1";
    }

    /**
     * Get orders
     * @param pageSize The numbers of items to return.
     * @param pageIndex (optional) The number of items to skip before starting to collect the result set.
     * @param queryString (optional) The query string.
     * @param continuationToken (optional) The continuation token.
     * @return Expected response to a valid request
     */
    getOrders(pageSize: number, pageIndex: number | undefined, queryString: string | null | undefined, continuationToken: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous> {
        let url_ = this.baseUrl + "/orders?";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (queryString !== undefined && queryString !== null)
            url_ += "queryString=" + encodeURIComponent("" + queryString) + "&";
        if (continuationToken !== undefined && continuationToken !== null)
            url_ += "continuationToken=" + encodeURIComponent("" + continuationToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOrders(_response);
        });
    }

    protected processGetOrders(response: AxiosResponse): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous>(<any>null);
    }

    /**
     * Get order by id
     * @param myEmail (optional) The email for filter orders to retrieve
     * @param id The id of the order
     * @return Expected response to a valid request
     */
    getOrderById(myEmail: string | null | undefined, id: string , cancelToken?: CancelToken | undefined): Promise<Order> {
        let url_ = this.baseUrl + "/orders/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (myEmail !== undefined && myEmail !== null)
            url_ += "myEmail=" + encodeURIComponent("" + myEmail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOrderById(_response);
        });
    }

    protected processGetOrderById(response: AxiosResponse): Promise<Order> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Order.fromJS(resultData200);
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Order>(<any>null);
    }

    /**
     * Update part of order by id
     * @param myTestHeader The myTestHeader special key
     * @param myTestHeaderBool The myTestHeaderBool special key
     * @param myTestHeaderInt The myTestHeaderInt special key
     * @param body (optional) 
     * @param id The id of the order
     * @return OK
     */
    patchOrdersId(myTestHeader: string, myTestHeaderBool: boolean, myTestHeaderInt: number, body: UpdateOrderRequest | undefined, id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "myTestHeader": myTestHeader !== undefined && myTestHeader !== null ? "" + myTestHeader : "",
                "myTestHeaderBool": myTestHeaderBool !== undefined && myTestHeaderBool !== null ? "" + myTestHeaderBool : "",
                "myTestHeaderInt": myTestHeaderInt !== undefined && myTestHeaderInt !== null ? "" + myTestHeaderInt : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPatchOrdersId(_response);
        });
    }

    protected processPatchOrdersId(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status === 502) {
            const _responseText = response.data;
            let result502: any = null;
            let resultData502  = _responseText;
            result502 = ProblemDetails.fromJS(resultData502);
            return throwException("Bad Gateway", status, _responseText, _headers, result502);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get user by email
     * @param email The email of the user to retrieve
     * @return Expected response to a valid request
     */
    getUserByEmail(email: string , cancelToken?: CancelToken | undefined): Promise<User> {
        let url_ = this.baseUrl + "/users/email?";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserByEmail(_response);
        });
    }

    protected processGetUserByEmail(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * Get user by id
     * @return OK
     */
    getUserById(id: string , cancelToken?: CancelToken | undefined): Promise<User> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * Update user by id
     * @param body (optional) 
     * @return OK
     */
    updateUserById(body: UpdateUserRequest | undefined, id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserById(_response);
        });
    }

    protected processUpdateUserById(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Delete user by id
     * @return OK
     */
    deleteUserById(id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteUserById(_response);
        });
    }

    protected processDeleteUserById(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get all users
     * @return OK
     */
    getUsers(  cancelToken?: CancelToken | undefined): Promise<User[]> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: AxiosResponse): Promise<User[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            return result200;
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User[]>(<any>null);
    }

    /**
     * Create a new user
     * @param body (optional) 
     * @return Created
     */
    postUser(body: CreateUserRequest | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPostUser(_response);
        });
    }

    protected processPostUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Update gender on a user
     * @param genderParam (optional) The gender to set on the user
     * @param body (optional) 
     * @return OK
     */
    updateMyTestGender(genderParam: GenderType | undefined, body: UpdateTestGenderRequest | undefined, id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/users/{id}/gender?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (genderParam === null)
            throw new Error("The parameter 'genderParam' cannot be null.");
        else if (genderParam !== undefined)
            url_ += "genderParam=" + encodeURIComponent("" + genderParam) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateMyTestGender(_response);
        });
    }

    protected processUpdateMyTestGender(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status === 409) {
            const _responseText = response.data;
            return throwException("Conflict", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Update name of account
     * @param accountId The accountId
     * @return OK
     */
    updateAccountName(accountId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/accounts/{accountId}/name";
        if (accountId === undefined || accountId === null)
            throw new Error("The parameter 'accountId' must be defined.");
        url_ = url_.replace("{accountId}", encodeURIComponent("" + accountId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateAccountName(_response);
        });
    }

    protected processUpdateAccountName(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Set name of account
     * @param accountId The accountId
     * @return OK
     */
    setAccountName(accountId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/accounts/{accountId}/name";
        if (accountId === undefined || accountId === null)
            throw new Error("The parameter 'accountId' must be defined.");
        url_ = url_.replace("{accountId}", encodeURIComponent("" + accountId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetAccountName(_response);
        });
    }

    protected processSetAccountName(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get addresses by postal code
     * @param postalCode The postalCode to limit addresses on
     * @return OK
     */
    getAddressesByPostalCodes(postalCode: string , cancelToken?: CancelToken | undefined): Promise<Address[]> {
        let url_ = this.baseUrl + "/addresses/{postalCode}";
        if (postalCode === undefined || postalCode === null)
            throw new Error("The parameter 'postalCode' must be defined.");
        url_ = url_.replace("{postalCode}", encodeURIComponent("" + postalCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAddressesByPostalCodes(_response);
        });
    }

    protected processGetAddressesByPostalCodes(response: AxiosResponse): Promise<Address[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Address.fromJS(item));
            }
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Address[]>(<any>null);
    }
}

/** A item result subset of a data query. */
export class Pagination implements IPagination {
    /** The number of items to request. */
    pageSize!: number;
    /** The given page index starting with 0. */
    pageIndex?: number | undefined;
    /** The query to filter items by. */
    queryString?: string | undefined;
    /** Token to indicate next result set. */
    continuationToken?: string | undefined;
    /** Items count in result set. */
    count!: number;
    /** Total items count. */
    totalCount?: number | undefined;
    /** Total pages. */
    totalPages?: number | undefined;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["pageSize"];
            this.pageIndex = _data["pageIndex"];
            this.queryString = _data["queryString"];
            this.continuationToken = _data["continuationToken"];
            this.count = _data["count"];
            this.totalCount = _data["totalCount"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize;
        data["pageIndex"] = this.pageIndex;
        data["queryString"] = this.queryString;
        data["continuationToken"] = this.continuationToken;
        data["count"] = this.count;
        data["totalCount"] = this.totalCount;
        data["totalPages"] = this.totalPages;
        return data; 
    }
}

/** A item result subset of a data query. */
export interface IPagination {
    /** The number of items to request. */
    pageSize: number;
    /** The given page index starting with 0. */
    pageIndex?: number | undefined;
    /** The query to filter items by. */
    queryString?: string | undefined;
    /** Token to indicate next result set. */
    continuationToken?: string | undefined;
    /** Items count in result set. */
    count: number;
    /** Total items count. */
    totalCount?: number | undefined;
    /** Total pages. */
    totalPages?: number | undefined;
}

/** A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807. */
export class ProblemDetails implements IProblemDetails {
    /** A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). */
    type?: string;
    /** A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4). */
    title?: string;
    /** The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
    status?: number;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail?: string;
    /** A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. */
    instance?: string;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

/** A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807. */
export interface IProblemDetails {
    /** A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). */
    type?: string;
    /** A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4). */
    title?: string;
    /** The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
    status?: number;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail?: string;
    /** A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. */
    instance?: string;
}

/** A single order. Hallo description with multiline and no ending dot */
export class Order implements IOrder {
    id?: string;
    description?: string;
    myTime?: string;
    myEmail?: string;
    myNullableDateTime?: Date | undefined;
    myDateTime?: Date;
    myNumber?: number;
    myInteger?: number;
    /** MyBool is great */
    myBool?: boolean;
    /** This is the good uri :-) */
    myUri?: string;
    myByte?: string;
    /** Hallo myStringList desc :-) */
    myStringList?: string[];
    myLong?: number;
    deliveryAddress?: Address;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.myEmail = "a@a.com";
            this.myInteger = 15;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.myTime = _data["myTime"];
            this.myEmail = _data["myEmail"] !== undefined ? _data["myEmail"] : "a@a.com";
            this.myNullableDateTime = _data["myNullableDateTime"] ? new Date(_data["myNullableDateTime"].toString()) : <any>undefined;
            this.myDateTime = _data["myDateTime"] ? new Date(_data["myDateTime"].toString()) : <any>undefined;
            this.myNumber = _data["myNumber"];
            this.myInteger = _data["myInteger"] !== undefined ? _data["myInteger"] : 15;
            this.myBool = _data["myBool"];
            this.myUri = _data["myUri"];
            this.myByte = _data["myByte"];
            if (Array.isArray(_data["myStringList"])) {
                this.myStringList = [] as any;
                for (let item of _data["myStringList"])
                    this.myStringList!.push(item);
            }
            this.myLong = _data["myLong"];
            this.deliveryAddress = _data["deliveryAddress"] ? Address.fromJS(_data["deliveryAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["myTime"] = this.myTime;
        data["myEmail"] = this.myEmail;
        data["myNullableDateTime"] = this.myNullableDateTime ? this.myNullableDateTime.toISOString() : <any>undefined;
        data["myDateTime"] = this.myDateTime ? this.myDateTime.toISOString() : <any>undefined;
        data["myNumber"] = this.myNumber;
        data["myInteger"] = this.myInteger;
        data["myBool"] = this.myBool;
        data["myUri"] = this.myUri;
        data["myByte"] = this.myByte;
        if (Array.isArray(this.myStringList)) {
            data["myStringList"] = [];
            for (let item of this.myStringList)
                data["myStringList"].push(item);
        }
        data["myLong"] = this.myLong;
        data["deliveryAddress"] = this.deliveryAddress ? this.deliveryAddress.toJSON() : <any>undefined;
        return data; 
    }
}

/** A single order. Hallo description with multiline and no ending dot */
export interface IOrder {
    id?: string;
    description?: string;
    myTime?: string;
    myEmail?: string;
    myNullableDateTime?: Date | undefined;
    myDateTime?: Date;
    myNumber?: number;
    myInteger?: number;
    /** MyBool is great */
    myBool?: boolean;
    /** This is the good uri :-) */
    myUri?: string;
    myByte?: string;
    /** Hallo myStringList desc :-) */
    myStringList?: string[];
    myLong?: number;
    deliveryAddress?: Address;
}

export class GenderType implements IGenderType {
    /** The users gender type */
    gender!: GenderTypeGender;

    constructor(data?: IGenderType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): GenderType {
        data = typeof data === 'object' ? data : {};
        let result = new GenderType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gender"] = this.gender;
        return data; 
    }
}

export interface IGenderType {
    /** The users gender type */
    gender: GenderTypeGender;
}

export class ColorType implements IColorType {
    /** The users color type */
    color!: ColorTypeColor;

    constructor(data?: IColorType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): ColorType {
        data = typeof data === 'object' ? data : {};
        let result = new ColorType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        return data; 
    }
}

export interface IColorType {
    /** The users color type */
    color: ColorTypeColor;
}

/** A single user. */
export class User implements IUser {
    id?: string;
    gender?: GenderType;
    firstName?: string;
    lastName?: string;
    email?: string;
    color?: ColorType;
    homeAddress?: Address;
    companyAddress?: Address;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gender = _data["gender"] ? GenderType.fromJS(_data["gender"]) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.color = _data["color"] ? ColorType.fromJS(_data["color"]) : <any>undefined;
            this.homeAddress = _data["homeAddress"] ? Address.fromJS(_data["homeAddress"]) : <any>undefined;
            this.companyAddress = _data["companyAddress"] ? Address.fromJS(_data["companyAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gender"] = this.gender ? this.gender.toJSON() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        data["homeAddress"] = this.homeAddress ? this.homeAddress.toJSON() : <any>undefined;
        data["companyAddress"] = this.companyAddress ? this.companyAddress.toJSON() : <any>undefined;
        return data; 
    }
}

/** A single user. */
export interface IUser {
    id?: string;
    gender?: GenderType;
    firstName?: string;
    lastName?: string;
    email?: string;
    color?: ColorType;
    homeAddress?: Address;
    companyAddress?: Address;
}

/** Request to create a user */
export class CreateUserRequest implements ICreateUserRequest {
    firstName!: string;
    lastName!: string;
    myNullableDateTime?: Date | undefined;
    myDateTime!: Date;
    email!: string;
    gender!: GenderType;

    constructor(data?: ICreateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.gender = new GenderType();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.myNullableDateTime = _data["myNullableDateTime"] ? new Date(_data["myNullableDateTime"].toString()) : <any>undefined;
            this.myDateTime = _data["myDateTime"] ? new Date(_data["myDateTime"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.gender = _data["gender"] ? GenderType.fromJS(_data["gender"]) : new GenderType();
        }
    }

    static fromJS(data: any): CreateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["myNullableDateTime"] = this.myNullableDateTime ? this.myNullableDateTime.toISOString() : <any>undefined;
        data["myDateTime"] = this.myDateTime ? this.myDateTime.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["gender"] = this.gender ? this.gender.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to create a user */
export interface ICreateUserRequest {
    firstName: string;
    lastName: string;
    myNullableDateTime?: Date | undefined;
    myDateTime: Date;
    email: string;
    gender: GenderType;
}

/** Request to update a user */
export class UpdateUserRequest implements IUpdateUserRequest {
    firstName?: string;
    lastName?: string;
    email?: string;
    gender?: GenderType;

    constructor(data?: IUpdateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.gender = _data["gender"] ? GenderType.fromJS(_data["gender"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["gender"] = this.gender ? this.gender.toJSON() : <any>undefined;
        return data; 
    }
}

/** Request to update a user */
export interface IUpdateUserRequest {
    firstName?: string;
    lastName?: string;
    email?: string;
    gender?: GenderType;
}

export class UpdateTestGenderRequest implements IUpdateTestGenderRequest {
    gender?: GenderType;

    constructor(data?: IUpdateTestGenderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gender = _data["gender"] ? GenderType.fromJS(_data["gender"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTestGenderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTestGenderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gender"] = this.gender ? this.gender.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUpdateTestGenderRequest {
    gender?: GenderType;
}

export class Address implements IAddress {
    streetName?: string;
    streetNumber?: string;
    postalCode?: string;
    cityName?: string;
    myCountry?: Country;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.streetName = _data["streetName"];
            this.streetNumber = _data["streetNumber"];
            this.postalCode = _data["postalCode"];
            this.cityName = _data["cityName"];
            this.myCountry = _data["myCountry"] ? Country.fromJS(_data["myCountry"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["streetName"] = this.streetName;
        data["streetNumber"] = this.streetNumber;
        data["postalCode"] = this.postalCode;
        data["cityName"] = this.cityName;
        data["myCountry"] = this.myCountry ? this.myCountry.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAddress {
    streetName?: string;
    streetNumber?: string;
    postalCode?: string;
    cityName?: string;
    myCountry?: Country;
}

export class Country implements ICountry {
    name!: string;
    alpha2Code!: string;
    alpha3Code!: string;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.alpha2Code = _data["alpha2Code"];
            this.alpha3Code = _data["alpha3Code"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["alpha2Code"] = this.alpha2Code;
        data["alpha3Code"] = this.alpha3Code;
        return data; 
    }
}

export interface ICountry {
    name: string;
    alpha2Code: string;
    alpha3Code: string;
}

/** Request to update an order */
export class UpdateOrderRequest implements IUpdateOrderRequest {
    myEmail!: string;

    constructor(data?: IUpdateOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.myEmail = _data["myEmail"];
        }
    }

    static fromJS(data: any): UpdateOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myEmail"] = this.myEmail;
        return data; 
    }
}

/** Request to update an order */
export interface IUpdateOrderRequest {
    myEmail: string;
}

export class Anonymous extends Pagination implements IAnonymous {

    constructor(data?: IAnonymous) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAnonymous extends IPagination {
}

export enum GenderTypeGender {
    Unknown = "Unknown",
    NonBinary = "NonBinary",
    Male = "Male",
    Female = "Female",
}

export enum ColorTypeColor {
    Unknown___0 = "Unknown = 0",
    Black___1 = "Black = 1",
    White___2 = "White = 2",
    Yellow___4 = "Yellow = 4",
    Red___8 = "Red = 8",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}